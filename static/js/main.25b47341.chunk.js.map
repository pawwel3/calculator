{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MathButton","props","number","parseInt","onClick","click","type","name","ResultPanel","className","nr1","symbol","nr2","result","startValue","App","React","useState","setResult","setNr1","setNr2","setSymbol","handleMathClick","numer1","numer2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25b47341.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  const [result, setResult] = React.useState(startValue);\n  const [nr1, setNr1] = React.useState(\"\");\n  const [nr2, setNr2] = React.useState(\"\");\n  const [symbol, setSymbol] = React.useState(\"\");\n\n  const handleMathClick = (type, number = 1) => {\n    const numer1 = parseInt(nr1);\n    const numer2 = parseInt(nr2);\n    if (symbol === \"\") {\n      if (type === \"number\") {\n        setNr1(nr1 + number);\n        setResult(result);\n        setNr2(nr2);\n        setSymbol(symbol);\n      } else if (type === \"addition\") {\n        setNr1(nr1);\n        setResult(result);\n        setNr2(nr2);\n        setSymbol(\"+\");\n      } else if (type === \"subtraction\") {\n        setNr1(nr1);\n        setResult(result);\n        setNr2(nr2);\n        setSymbol(\"-\");\n      } else if (type === \"reset\") {\n        setNr1(\"\");\n        setResult(\"\");\n        setNr2(\"\");\n        setSymbol(\"\");\n      } else if (type === \"multiplication\") {\n        setNr1(nr1);\n        setResult(result);\n        setNr2(nr2);\n        setSymbol(\"*\");\n      } else if (type === \"division\") {\n        setNr1(nr1);\n        setResult(result);\n        setNr2(nr2);\n        setSymbol(\"/\");\n      }\n    } else {\n      if (type === \"number\") {\n        setNr1(nr1);\n        setResult(result);\n        setNr2(nr2 + number);\n        setSymbol(symbol);\n      } else if (type === \"addition\") {\n        setNr1(nr1);\n        setResult(numer1 + numer2);\n        setNr2(nr2);\n        setSymbol(\"+\");\n      } else if (type === \"score\") {\n        if (symbol === \"+\") {\n          setNr1(nr1);\n          setResult(numer1 + numer2);\n          setNr2(nr2);\n          setSymbol(symbol);\n        } else if (symbol === \"-\") {\n          setNr1(nr1);\n          setResult(numer1 - numer2);\n          setNr2(nr2);\n          setSymbol(symbol);\n        } else if (symbol === \"*\") {\n          setNr1(nr1);\n          setResult(numer1 * numer2);\n          setNr2(nr2);\n          setSymbol(symbol);\n        } else if (symbol === \"/\") {\n          setNr1(nr1);\n          setResult(numer1 / numer2);\n          setNr2(nr2);\n          setSymbol(symbol);\n        }\n      } else if (type === \"subtraction\") {\n        setNr1(nr1);\n        setResult(result);\n        setNr2(nr2);\n        setSymbol(\"-\");\n      } else if (type === \"reset\") {\n        setNr1(\"\");\n        setResult(\"\");\n        setNr2(\"\");\n        setSymbol(\"\");\n      }\n    }\n  };\n  return (\n    <div className=\"contener\">\n      <ResultPanel nr1={nr1} result={result} nr2={nr2} symbol={symbol} />\n      <div>\n        <MathButton name=\"7\" number=\"7\" type=\"number\" click={handleMathClick} />\n        <MathButton name=\"8\" number=\"8\" type=\"number\" click={handleMathClick} />\n        <MathButton name=\"9\" number=\"9\" type=\"number\" click={handleMathClick} />\n        <MathButton\n          name=\"+\"\n          number=\"+\"\n          type=\"addition\"\n          click={handleMathClick}\n        />\n      </div>\n      <div>\n        {\" \"}\n        <MathButton name=\"4\" number=\"4\" type=\"number\" click={handleMathClick} />\n        <MathButton name=\"5\" number=\"5\" type=\"number\" click={handleMathClick} />\n        <MathButton name=\"6\" number=\"6\" type=\"number\" click={handleMathClick} />\n        <MathButton\n          name=\"-\"\n          number=\"-\"\n          type=\"subtraction\"\n          click={handleMathClick}\n        />\n      </div>\n      <div>\n        <MathButton name=\"3\" number=\"3\" type=\"number\" click={handleMathClick} />\n        <MathButton name=\"2\" number=\"2\" type=\"number\" click={handleMathClick} />\n        <MathButton name=\"1\" number=\"1\" type=\"number\" click={handleMathClick} />\n\n        <MathButton\n          name=\"*\"\n          number=\"*\"\n          type=\"multiplication\"\n          click={handleMathClick}\n        />\n      </div>\n      <div>\n        <MathButton name=\"C\" number=\"0\" type=\"reset\" click={handleMathClick} />\n        <MathButton name=\"0\" number=\"0\" type=\"number\" click={handleMathClick} />\n        <MathButton\n          name=\"/\"\n          number=\"/\"\n          type=\"division\"\n          click={handleMathClick}\n        />\n        <MathButton name=\"=\" number=\"=\" type=\"score\" click={handleMathClick} />\n      </div>\n    </div>\n  );\n};\nconst MathButton = (props) => {\n  const number = parseInt(props.number);\n  return (\n    <button onClick={() => props.click(props.type, number)}>\n      {props.name}\n    </button>\n  );\n};\nconst ResultPanel = (props) => {\n  return (\n    <div className=\"result\">\n      <h2> {props.nr1}</h2>\n\n      <h2>{props.symbol}</h2>\n      <h2>{props.nr2}</h2>\n      <h2>Wynik:{props.result}</h2>\n    </div>\n  );\n};\nconst startValue = \"\";\n\n//ReactDOM(<App result={startValue} />, document.getElementById(\"rood\"));\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}